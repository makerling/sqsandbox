# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: Bicep-sqsandbox

# trigger:
# - main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(servicePrincipal)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az bicep build --file sqsandbox_main.bicep'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/sqsandbox_main.json'
        ArtifactName: 'finishedTemplate'
        publishLocation: 'Container'
- stage: deploy
  jobs:
  - deployment: biceptoAzure
    displayName: 'Deploy bicep to Azure'
    environment: 'AzureDeployment'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          # - task: AzureResourceManagerTemplateDeployment@3
          #   inputs:
          #     deploymentScope: 'Resource Group'
          #     azureResourceManagerConnection: $(servicePrincipal) 
          #     subscriptionId: $(azureSubscription)
          #     resourceGroupName: $(resourceGroupName)
          #     location: $(location)
          #     templateLocation: 'Linked artifact' 
          #     csmFile: '$(Agent.BuildDirectory)/finishedTemplate/sqsandbox_main.json'
          #     csmParametersFile: '$(Agent.BuildDirectory)/sqsandbox_vnet.parameters.json'
          #     overrideParameters: '-virtualNetworkName $(virtualNetworkName) -location $(location) -user $(user) -team $(team) -project $(project) -ipaddress $(ipaddress)'
          #     deploymentMode: 'Complete' 
            
          - task: AzureCLI@2
            displayName: 'deploy bicep template'
            inputs:
              azureSubscription: $(servicePrincipal) 
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                $(Agent.AcceptTeeEula)
                $(Agent.BuildDirectory)
                $(Agent.HomeDirectory)
                $(Agent.Id)
                $(Agent.JobName)
                $(Agent.JobStatus)
                $(Agent.MachineName)
                $(Agent.Name)
                $(Agent.OS)
                $(Agent.OSArchitecture)
                $(Agent.RetainDefaultEncoding)
                $(Agent.ReadOnlyVariables)
                $(Agent.RootDirectory)
                $(Agent.TempDirectory)
                $(Agent.ToolsDirectory)
                $(Agent.Version)
                $(Agent.WorkFolder)
                $(Build.ArtifactStagingDirectory)
                $(Build.BinariesDirectory)
                $(Build.DefinitionName)
                $(Build.SourceBranch)
                $(Build.SourceVersion)
                $(Build.SourcesDirectory))
                $(Build.StagingDirectory))
                $(Common.TestResultsDirectory))
                $(Pipeline.Workspace)
                $(System.AccessToken)
                $(System.ArtifactsDirectory)
                $(System.CollectionId)
                $(System.Culture)
                $(System.DefaultWorkingDirectory)
                $(System.DefinitionId)
                $(System.EnableAccessToken)
                $(System.HostType)
                $(System.JobAttempt)
                $(System.JobId)
                $(System.JobName)
                $(System.PhaseAttempt)
                $(System.PhaseDisplayName)
                $(System.PhaseName)
                $(System.ServerType)
                $(System.StageAttempt)
                $(System.StageName)
                $(System.TeamProject)
                $(System.TeamProjectId)
                $(System.WorkFolder)
                $(Task.DisplayName)
                ls -lah
              # inlineScript: 'az deployment group create --resource-group $(resourceGroupName) --template-file $(Build.SourcesDirectory)/sqsandbox_main.bicep --parameters $(Build.SourcesDirectory)/sqsandbox_vnet.parameters.json'
                # vars="$(RESOURCEGROUPNAME)"
                # vars2=$(RESOURCEGROUPNAME)
                # echo $vars
                # echo $vars2
                # echo $(RESOURCEGROUPNAME)
                # echo $(resourceGroupName)